#! /usr/bin/env python
"""Cloudmesh Raspberry Pi Mass Image Burner.
Usage:
  cm-burn create [--image=IMAGE] [--group=GROUP] [--names=HOSTS] [--ips=IPS] [--key=PUBLICKEY] [--ssid=SSID] [--psk=PSK] [--bootdrive=BOOTDRIVE] [--rootdrive=ROOTDRIVE]
  cm-burn ls
  cm-burn rm IMAGE
  cm-burn get [URL]
  cm-burn update
  cm-burn check install
  cm-burn hostname [HOSTNAME]
  cm-burn ssh [PUBLICKEY]
  cm-burn wifi SSID [PASSWD]
  cm-burn info
  cm-burn image [--image=IMAGE] [--device=DEVICE]
  cm-burn (-h | --help)
  cm-burn --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --key=KEY     the path of the public key [default: ~/.ssh/id_rsa.pub].
  --ips=IPS     th ips in hostlist format
  --image=IMAGE  the image to be burned [default: 2018-06-27-raspbian-stretch.img].

Files:
  This is not fully thought through and needs to be documented
  ~/.cloudmesh/images
  ~/.cloudmesh/inventory
  Location where the images will be stored for reuse

BUG:
  bootdrive and rootdrive will be removed in a future release as they are self discoverable

Description:
  cm-burn
  cm-burn create [--image=IMAGE] [--group=GROUP] [--names=HOSTS] [--ips=IPS] [--key=PUBLICKEY] [--ssid=SSID] [--psk=PSK] [--bootdrive=BOOTDRIVE] [--rootdrive=ROOTDRIVE]
  cm-burn update
        updates the downloaded images if new once are available
  cm-burn ls
        lists the downloaded images
  cm-burn rm IMAGE
        remove the image
  cm-burn get URL
        downloads the image at the given URL
  cm-burn get jessie
        abbreviation to download a specific version of an image.
        Identify what would be useful.
  cm-burn hostname HOSTNAME
        writes the HOSTNAME as hostname on the currently inserted SD Card
  cm-burn hostname
        reads the hostname form the current SD card

Example:
  cm-burn create --group=red --names=red[5-6] --ip=192.168.1.[5-6]
"""
import os
import subprocess
from docopt import docopt
import hostlist
from prompter import yesno
import platform
import wget
import pathlib
from os import path
import glob
import shutil
import requests
import zipfile
import sys
from pprint import pprint
import yaml
import textwrap
import getpass
import time
import datetime

VERSION = "0.1"
debug = False

columns, lines = os.get_terminal_size()

# TODO: the dirs are only needed for windows as they are implemented now in self.filename for OSX
# we should remove them and make sure that cloudmesh images gets created on osx
# and linux if it does not exist
IMAGE_DIR=os.path.expanduser("~/.cloudmesh/images")
BOOT_DIR =''

def WARNING(*args, **kwargs):
    print("WARNING:", *args, file=sys.stderr, **kwargs)

def ERROR(*args, **kwargs):
    print("ERROR:", *args, file=sys.stderr, **kwargs)

def run(command):
    return subprocess.run(command, stdout=subprocess.PIPE).stdout.decode('utf-8')

def cat(path):
    with open(path, 'r') as file:
        content = file.read()
    return content

def execute_with_progress(command):
    p = subprocess.Popen(command.split(" "), stdout=subprocess.PIPE)
    while True:
        line = p.stdout.readline()
        if not line:
            break
        print (line)

def execute(commands):
    """
       execute the commands that are included in the \n separated string line by line
       :param commands: the commands
       :return:
    """
    lines = commands.split("\n")
    for line in lines:
        print(line)
        proc = subprocess.Popen(line, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        while proc.poll() is None:
            print(proc.stdout.readline())  # give output from your execution/your own message
        # self.commandResult = proc.wait() #catch return code


class piburner(object):

    def disable_password(self):
        """
        disables and replaces the password with a random string so that by accident the pi can not be logged into.
        The only way to login is via the ssh key
        :return:
        """
        raise NotImplementedError()

    def unmount(self, drive=None):
        """
        unmounts the filesystem regardless of OS using the given path
        :param path:
        :return:
        """
        if platform.system() == 'Windows':
            #TODO: Remove drive in windows, why can you not use the mount function build into windows?
            #TODO: Why do you need RemoveDrive?
            # script =  "mountvol {drive} /p".format(drive = self.root_drive)
            script = "RemoveDrive {drive}:".format(drive = self.root_drive)
            execute(script)
        elif platform.system() == 'Darwin':
            if drive is None:
                for drive in ['/Volumes/boot', '/Volumes/rootfs']:
                    execute("sudo umount {drive}".format(drive=drive))
            else:
                execute("sudo umount {drive}".format(drive=drive))
        else:
            subprocess.getoutput("sudo umount {drive}".format(drive=self.root_drive))
            subprocess.getoutput("sudo umount {drive}".format(drive=self.boot_drive))

    def mount(self, device=None, path=None):
        """
        mounts the device to the filesystem regardless of OS using the given path
        :param path:
        :return:
        """
        
        if platform.system() == 'Windows':
            #TODO: Remove drive in windows, why can you not use the mount function build into windows?
            #TODO: Why do you need RemoveDrive?
            # mountvol %drive% /p
            # create volume mount pount as volume
            # volume = ...
            # remember to escape \ in volume
            # script = "mount {drive} {volume}:".format(drive=self.root_drive, volume=volume)
            # why remove, should we not mount?
            #script = "RemoveDrive {drive}:".format(drive = self.root_drive)
            #execute(script)
            raise NotImplementedError()
        elif platform.system() == 'darwin':
            # extFS does outomount so we just check i f they are mounted
            # TODO: check if they exist
            pass
            # if drive is None:
            #     drives = ['/Volume/boot', 'Volume/rootfs']
            # else:
            #     drives = [drive]
            # for drive in drives:
            #     if not os.path.isdir(drive):
            #         ERROR('drive is not mounted:', drive)

            #
            # if drive is None:
            #    for drive in ['/Volume/boot', 'Volume/rootfs']:
            #        execute("sudo mount {drive}".format(drive=drive))
            # else:
            #    execute("sudo mount {drive}".format(drive=drive))
        else:
            raise NotImplementedError()

    # ok osx
    def activate_ssh(self, public_key):
        """
        sets the public key path and copies the it to the SD card
        :param public_key: the public key location
        :return: True if successful
        """

        # set the keypath
        self.keypath = public_key
        if debug:
            print(self.keypath)
        if not os.path.isfile(self.keypath):
            ERROR("key does not exist", self.keypath)
            sys.exit()


        # activate ssh by creating an empty ssh file in the boot drive
        pathlib.Path(self.filename("/ssh")).touch()
        # Write the content of the ssh rsa to the authorized_keys file
        key = pathlib.Path(public_key).read_text()
        ssh_dir = self.filename("/home/pi/.ssh")
        print (ssh_dir)
        if not os.path.isdir(ssh_dir):
            os.makedirs(ssh_dir)
        pathlib.Path(self.filename("/home/pi/.ssh/authorized_keys")).write_text(key)

    # ok osx
    def info(self):
        if sys.platform in ['darwin', 'linux']:
            information = {
                "os": sys.platform,
                "ssh": os.path.exists(self.filename("/ssh")),
                #"key": cat(self.filename("/home/pi/.ssh/authorized_keys")),
                "hostname": cat(self.filename("/etc/hostname")).strip()
            }

            # print(yaml.dump(information, default_flow_style=False))
            pprint(information)

    # ok osx
    def write_hostname(self, host):
        """
        set the hostname

        :param host: the hostname
        :return:
        """
        self.host = host
        path = self.filename("/etc/hostname")
        if debug:
            print(self.host)
        pathlib.Path(path).write_text(host)

    def filename(self, path):
        """
        creates the proper path for the file bby using the proper file systyem prefix. This method is
        supposed to universally work, so that we simply can use the filesystem name without worrying
        about the location of the root file system.

        :param path:
        :return:
        """        
        #print(path)
        if platform.system() == "Darwin":
            if path in ["/etc/hostname",
                        "/home/pi/.ssh/authorized_keys",
                        "/home/pi/.ssh",
                        "/etc/wpa_supplicant/wpa_supplicant.conf",
                        "/etc/dhcpcd.conf"]:
                volume = "/Volumes/rootfs"
            elif path in ["/ssh"]:
                volume = "/Volumes/boot"
            else:
                ERROR("path not defined in cm-burn", path)
            location = pathlib.Path("{volume}/{path}".format(volume=volume, path=path))
        elif platform.system() == "Windows":
            if path in ["/etc/hostname",
                        "/home/pi/.ssh/authorized_keys",
                        "/home/pi/.ssh",
                        "/etc/wpa_supplicant/wpa_supplicant.conf",
                        "/etc/dhcpcd.conf"]:
                volume = self.root_drive                
            elif path in ["/ssh"]:
                volume = self.boot_drive
            else:
                ERROR("path not defined in cm-burn", path)
            location = pathlib.Path("{volume}:{path}".format(volume=volume, path=path))
        elif platform.system() == "Linux":
            if path in ["/etc/hostname",
                        "/home/pi/.ssh/authorized_keys",
                        "/home/pi/.ssh",
                        "/etc/wpa_supplicant/wpa_supplicant.conf",
                        "/etc/dhcpcd.conf"]:
                volume = self.root_drive
            elif path in ["/ssh"]:
                volume = self.boot_drive
            else:
                ERROR("path not defined in cm-burn", path)
            location = pathlib.Path("{volume}/{path}".format(volume=volume, path=path))
        return location

    # ok osx
    def read_hostname(self):
        """
        set the hostname

        :param host: the hostname
        :return:
        """
        host = cat(self.filename("/etc/hostname"))
        return host

    def image_exists(self, name):
        path = pathlib.Path(self.home / ".cloudmesh" / "images" / name)
        return os.path.isfile(path)

    def check_device(self, device):
        deviceok = False
        if platform.system() == "Linux":
            out = subprocess.getoutput("lsblk | grep {device}".format(device=device))
            if (self.boot_drive in out) and (self.root_drive in out):
                deviceok = True
        elif platform.system() == "Darwin":
            devs = subprocess.getoutput("diskutil list").split("/dev/")
            usbdev = None
            for dev in devs:
                if "boot" in dev and "rootfs" in dev and "Windows_FAT_32" in dev:
                    usbdev = dev.split("\n")[0].split(" ")[0]
            if usbdev == device:
                deviceok = True
        elif platform.system() == "Windows":
            deviceok = True
        return deviceok

    def __init__(self):
        """
        initialize the pi burner
        TODO: provide more information
        """
        # store defaults also in ~/.cloudmesh/cm-burn.yaml as we have to execute it a lot, we can than read 
        # defaults from there if the file exist
        #if sys.platform == "Windows":
        #    self.windows_drive = "K"
        #    self.windows_pi_drive = "L"
        self.root_drive = None
        self.boot_drive = None
        if platform.system() == 'Linux':
            self.boot_drive = "/media/{user}/boot".format(user=getpass.getuser())
            self.root_drive = "/media/{user}/rootfs".format(user=getpass.getuser())
        elif platform.system() == 'Darwin':
            self.boot_drive = "/Volumes/boot"
            self.root_drive = "/Volumes/rootfs"
        self.image = None
        self.host = None
        self.home = pathlib.Path(path.expanduser("~"))
        self.keypath = pathlib.Path(self.home / ".ssh" / "id_rsa.pub")
        # BUG: is this not the image directory?
        # should that not also be declared globally with pathlib
        self.cloudmesh_images = pathlib.Path(self.home / ".cloudmesh" / "images")
        if debug:
            print("HOME:", self.home)
            print("KEY:", self.keypath)
            print("IMAGES DIR", self.cloudmesh_images)
        pass

    def get(self, image=None):
        """
        downloads the image and stores it in ~/.cloudmesh/images
        TODO: finalize the directory, create it if image already exists  doe not  not download
        :param image: The image url
        :return:
        """
        latest = "https://downloads.raspberrypi.org/raspbian_latest"
        if image is None:
            image = latest

        if debug:
            print("Image:", image)
            print("Images dir:", self.cloudmesh_images)
        if not os.path.exists(self.cloudmesh_images):
            # TODO: check if this works if path is ~/.cloudmesh/images
            os.makedirs(self.cloudmesh_images)
        if debug:
            print(image)
        os.chdir(self.cloudmesh_images)
        # find redirectionlink
        source = requests.head(image, allow_redirects=True).url
        size = requests.get(image, stream=True).headers['Content-length']
        destination = os.path.basename(source)
        if debug:
            print(image)
            print(destination)
        download = True
        if os.path.exists(destination):
            if int(os.path.getsize(destination)) == int(size):
                WARNING("file already downloaded. Found at:", pathlib.Path(self.cloudmesh_images / destination))
                download = False
        if download:
            wget.download(image)

        # uncompressing

        image_name = destination.replace(".zip","") + ".img"
        image_file = pathlib.Path(self.cloudmesh_images /image_name)
        if not os.path.exists(image_file):
            self.unzip_image(image_name)
        else:
            WARNING("file already downloaded. Found at:", pathlib.Path(self.cloudmesh_images / image_name))
        self.image = pathlib.Path(self.cloudmesh_images / image_name)
        return self.image

    def unzip_image(self, source):
        tmp = pathlib.Path(self.cloudmesh_images) / "."
        os.chdir(tmp)
        image_zip = str(pathlib.Path(self.cloudmesh_images / source)).replace(".img", ".zip")
        print("unzip image", image_zip)
        zipfile.ZipFile(image_zip).extractall()

    def ls(self):
        """
        List all images in the image directory
        :return:
        """
        images_search = pathlib.Path(self.cloudmesh_images / "*")
        if debug:
            print("images search", images_search)
        images = glob.glob(str(images_search))
        print()
        print('Available images')
        print(columns * '=')
        print('\n'.join(images))
        print()

    def set_ip(self, ip):
        """
        TODO: How to set the static IP for both wifi and wired
        :param drive: the ip 
        :return:
        """
        
        self.ip = ip

    def set_root_drive(self, drive):
        """
        TODO: provide explanation
        :param drive: the drive name for windows
        :return:
        """
        # BUG: not sure what this drive is so replace abc with something meaningful
        self.root_drive = drive

    def set_boot_drive(self, drive):
        """
        TODO: provide information
        :param drive: the drive name for windows
        :return:
        """
        # BUG: not sure what this drive is so replace efg with something meaningful
        self.boot_drive = drive


    def configure_wifi(self, ssid, psk):
        """
        sets the wifi. ONly works for psk based wifi
        :param ssid: the ssid
        :param psk: the psk
        :return:
        """

        wifi = textwrap.dedent("""\
                ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev 
                update_config=1 
                country=US
                
                network={{
                        ssid=\"{network}\"
                        psk=\"{pwd}\"
                        key_mgmt=WPA-PSK
                }}""".format(network=ssid, pwd=psk))
        print(wifi)
        pathlib.Path(self.filename("/etc/wpa_supplicant/wpa_supplicant.conf")).write_text(wifi)

    



    '''
    def gregor(self, names, key, ssid=None, psk=None):
        global columns
        for name in hostlist.expand_hostlist(names):
            print(columns * "-")
            print(name)
            print(columns * "-")

            # self.create_burn_image(name)
            self.mount_burn_image(name + ".img")
    '''

    def configure_static_ip(self):

        #set staticip
        data = {
            "domain": "192.168.0.1",
            "ip": self.ip
        }
        # TODO: why are eth0 and wlan0 differnt? should they not be the same as eth0?
        # OLD:
        #    interface wlan0
        #    static ip_address={ip}/24
        #    static routers=10.0.0.1
        #    static domain_name_servers=10.0.0.1
        dhcp_conf = textwrap.dedent("""
            interface eth0
            
            static ip_address={ip}/24
            static routers={domain}
            static domain_name_servers={domain}

            interface wlan0

            static ip_address={ip}/24
            static routers={domain}
            static domain_name_servers={domain}
        """.format(**data))

        if debug:
            print(dhcp_conf)
        #
        # TODO: this seems not coorect, shoudl be in etc/network/interfaces?
        path = pathlib.Path(self.filename("/etc/dhcpcd.conf"))
        
        with open(path, 'a', encoding='utf-8', newline="\n") as file:
            file.write(dhcp_conf)

        # why is this needed?
        # if platform.system() == 'Windows':
        #    fileContents = open(path,"r").read()
        #    with open(path,"w", newline="\n") as file:
        #        file.write(fileContents)

    def am_i_pi(self):
        return "raspberry" in platform.uname()


    def prepare_burn_on_pi_command(self, image, device):
        """
        assumes you called get before and have valid image
        :return:
        """
        if device is None:
            # activate an image and create a yaml file cmburn.yaml with parameter that is read upon start in __init___
            
            # output = run("sudo", "ls",  "-ltr",  "/dev/*")
            output = run("sudo ls -ltr /dev/*")
            # TODO: find mmcblk0
            device = "mmcblk0" # hard coded for now
            print(output)
        data = {
            image: self.image,
            device: device
        }

        command = "sudo dd bs=1M if=~{image} of={device} status=progress conv=fsync".format(**data).split(" ")
        print (command)
        return (command)


    def burn(self, image, device=None):
        """
        burn the image onto the SD card
        :return: True if succesfull and test passed, false otherwise
        """
        # burn image on python device
        # if not os.path.exists(IMAGE_DIR):
        # os.makedirs(IMAGE_DIR)
        # BUG: if condition is not implemented
        
        command = ""
        if platform.system() == 'Windows':
            # BUG: does not use pathlib
            # BUG: command not in path, should be in ~/.cloudmesh/bin so it can easier be found,
            # BUG: should it not be installed from original
            command = "{dir}\\CommandLineDiskImager\\CommandLineDiskImager.exe {dir}\\images\\2018-06-27-raspbian-stretch.img {drive}".format(
                dir=os.getcwd(), drive=self.boot_drive)            
            # also dir needs to be done in pathlib
            # diskimager = pathlib.Path(r'/CommandLineDiskImager/CommandLineDiskImager.exe')
            # script = """{dir}\\{diskimager} {dir}\\2018-04-18-raspbian-stretch.img {drive}
            # """.format(dir=os.getcwd(), drive=self.windows_drive, diskimiger=dikimiger)
        elif self.am_i_pi():

            command = self.prepare_burn_on_pi_command(image, device)
            ERROR("not yet implemented")
            sys.exit()
        elif platform.system() in ['Linux']:
            self.unmount()
            command = "sudo dd if={image} of=/dev/{device} bs=4M status=progress".format(image=image,device=device)
        elif platform.system() in ['Darwin']:
            self.unmount()
            command = "sudo dd if={image} of=/dev/{device} bs=4m".format(image=image,device=device)

        #print(command)
        if command:
            execute_with_progress(command)
            #execute(command)
        # TODO: execute test
        # if test successful: return True else: False

    # TODO: remove bootdrives from parameters as they should be selfdicoverable
    def create(self, image, names, key, ips, ssid=None, psk=None, bootdrive=None, rootdrive=None):
        """
        creates a repeated burn on all names specified,
        TODO: why is this not part of the previous class?

        :param names: the hostnames of in hostlist format to be burned
        :param key: the public key location # TODO: should be defaulted to ~/.ssh/id_rsa.pub
        :param bootdrive: the boot drive # TODO: on linux we do not have a boot drive, so this should not be a parameter and needs to be autodiscovered
        :param rootdrive: #TODO: on linux we do not have a boot drive, so this should not be a parameter and needs to be autodiscovered
        :param ssid: # TODO: should be set to None and if its none we do not do it we actually do not need wifi, should be handled differently
        :param psk: # TODO: should be set to None and if its none we do not do it we actually do not need wifi, should be handled differently
        :return:
        """

        hosts = hostlist.expand_hostlist(names)
        iplist = hostlist.expand_hostlist(ips)
        # BUG: can we not discover the boot and rootdrive. Why do we have to set
        # it to I and G, can we not get the next free drive letter?
        # bootdrive = find_next_free_drive_letter()
        # rootdrive = find_next_free_drive_letter()
        # BUG: are the drives released after use?         
        print(bootdrive)
        print(rootdrive)
        if bootdrive:  
            self.set_boot_drive(bootdrive)
        if rootdrive:
            self.set_root_drive(rootdrive)
        for host, ip in zip(hosts, iplist):
            print("Start Time - {currenttime}".format(currenttime = datetime.datetime.now()))
            print(columns * '-')
            print("Burning", host)
            # break
            print(columns * '-')
            yesno('Please insert the card for ' + host + "(y)?")
            print("wait till its recognized")
            print("once in conformation proceed")
        
            self.burn(image)
            print("burn")
            #Sleep for 5 seconds to have the SD to be mounted
            yesno('Please eject the SD card and re-insert. Press (y) when done')
            time.sleep(5)
            self.set_ip(ip)
            print("Set IP - {id}".format(id=ip))
            self.write_hostname(host)
            print("Updating host - {name}".format(name=host))

            print("ssid - {id}".format(id=ssid))
            print("psk - {pwd}".format(pwd=psk))
            if ssid:
                self.configure_wifi(ssid, psk)
                print("Updating wifi")

            self.activate_ssh(key)
            print("Updating ssh")

            self.configure_static_ip()
            print("Updating Network - Static IP")  

            self.unmount()
            print("Removed drive")

            print("Please remove the card for host", host)
            yesno("Press y once the card is removed")

            print("take the card out")
            print("End Time - {currenttime}".format(currenttime = datetime.datetime.now()))
            break

def analyse():    
   # if arguments["rm"]:
   #     rm(arguments["image"])

   # elif arguments["get"]:
   #     print(arguments["URL"])
   #     get(arguments["URL"])
   # elif arguments["ls"]:
    print (arguments)
    if arguments["ls"]:
        burner = piburner()
        burner.ls()
    elif arguments["get"]:
        burner = piburner()
        burner.get()
    elif arguments["create"]:
        burner = piburner()
        wifipass = None
        bootdrv = None
        rootdrv = None
        if "BOOTDRIVE" in arguments:
            bootdrv = arguments["BOOTDRIVE"]
        if "ROOTDRIVE" in arguments:
            rootdrv = arguments["ROOTDRIVE"]
        image = arguments["--image"]
        if not burner.image_exists(image):
            ERROR("The image {image} does not exist".format(image=image))
            sys.exit()
        else:
            burner.image = pathlib.Path(burner.home / ".cloudmesh" / "images" / image)
        burner.create(burner.image,
                      names=arguments["--names"],
                      key=arguments["--key"],
                      ips=arguments["--ips"],
                      ssid=arguments["--ssid"],
                      psk=arguments["--psk"],
                      bootdrive=bootdrv,
                      rootdrive=rootdrv)

    elif arguments["check"] and arguments["install"]:
        ERROR("not yet implemented")

    elif arguments["hostname"]:
        host = arguments["HOSTNAME"]
        burner = piburner()

        if host != None:
            print("Set host to:", host)
            burner.write_hostname(host)
        else:
            print(burner.read_hostname())

    elif arguments["wifi"]:
        ssid = arguments["SSID"]
        passwd = arguments["PASSWD"]
        if passwd is None:
            passwd = getpass.getpass()
        print (ssid)
        print (passwd)
        burner = piburner()
        burner.configure_wifi(ssid, passwd)

    elif arguments["image"]:
        image = arguments["--image"]
        device = arguments["--device"]
        burner = piburner()
        # check if image exists
        if not burner.image_exists(image):
            ERROR("The image {image} does not exist".format(image=image))
            sys.exit()
        else:
            burner.image = pathlib.Path(burner.home / ".cloudmesh" / "images" / image)

        # TODO: check if device exists
        if not burner.check_device(device):
            ERROR("The device {device} does not exist or not available".format(device=device))
            sys.exit()
        burner.burn(burner.image, device)

    elif arguments["ssh"]:
        key = arguments["PUBLICKEY"]
        if key is None:
            key = os.path.expanduser("~") + "/.ssh/id_rsa.pub"
        print("Use ssh key:", key)
        burner = piburner()
        burner.activate_ssh(key)

    elif arguments["info"]:
        burner = piburner()
        burner.info()


if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    # if debug:
    #   print(arguments) # just for debugging
    analyse()
